DROP DATABASE IF EXISTS tvshows;
CREATE DATABASE tvshows;
USE tvshows;

CREATE TABLE reviewers(
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	first_name VARCHAR(255),
	last_name VARCHAR(255)
);
	

CREATE TABLE series (
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	title VARCHAR(500),
	released_year YEAR(4),
	genre VARCHAR(255)
);


CREATE TABLE reviews(
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	rating DECIMAL(2,1),
	series_id INT NOT NULL,
	reviewer_id INT NOT NULL,
	FOREIGN KEY (reviewer_id) REFERENCES reviewers(id)
		ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (series_id) REFERENCES series(id)
		ON UPDATE CASCADE ON DELETE CASCADE

);

INSERT INTO series (title, released_year, genre) VALUES
    ('Archer', 2009, 'Animation'),
    ('Arrested Development', 2003, 'Comedy'),
    ("Bob's Burgers", 2011, 'Animation'),
    ('Bojack Horseman', 2014, 'Animation'),
    ("Breaking Bad", 2008, 'Drama'),
    ('Curb Your Enthusiasm', 2000, 'Comedy'),
    ("Fargo", 2014, 'Drama'),
    ('Freaks and Geeks', 1999, 'Comedy'),
    ('General Hospital', 1963, 'Drama'),
    ('Halt and Catch Fire', 2014, 'Drama'),
    ('Malcolm In The Middle', 2000, 'Comedy'),
    ('Pushing Daisies', 2007, 'Comedy'),
    ('Seinfeld', 1989, 'Comedy'),
    ('Stranger Things', 2016, 'Drama');
	
	INSERT INTO reviewers (first_name, last_name) VALUES
    ('Thomas', 'Stoneman'),
    ('Wyatt', 'Skaggs'),
    ('Kimbra', 'Masters'),
    ('Domingo', 'Cortes'),
    ('Colt', 'Steele'),
    ('Pinkie', 'Petit'),
    ('Marlon', 'Crafford');
	
	INSERT INTO reviews(series_id, reviewer_id, rating) VALUES
    (1,1,8.0),(1,2,7.5),(1,3,8.5),(1,4,7.7),(1,5,8.9),
    (2,1,8.1),(2,4,6.0),(2,3,8.0),(2,6,8.4),(2,5,9.9),
    (3,1,7.0),(3,6,7.5),(3,4,8.0),(3,3,7.1),(3,5,8.0),
    (4,1,7.5),(4,3,7.8),(4,4,8.3),(4,2,7.6),(4,5,8.5),
    (5,1,9.5),(5,3,9.0),(5,4,9.1),(5,2,9.3),(5,5,9.9),
    (6,2,6.5),(6,3,7.8),(6,4,8.8),(6,2,8.4),(6,5,9.1),
    (7,2,9.1),(7,5,9.7),
    (8,4,8.5),(8,2,7.8),(8,6,8.8),(8,5,9.3),
    (9,2,5.5),(9,3,6.8),(9,4,5.8),(9,6,4.3),(9,5,4.5),
    (10,5,9.9),
    (13,3,8.0),(13,4,7.2),
    (14,2,8.5),(14,3,8.9),(14,4,8.9);

-- Challenge 1: Retrieve all movie titles and each rating associated with the movie.
SELECT 
	s.title, 
	r.rating 
FROM series s 
JOIN reviews r
ON s.id = r.series_id;

-- Challenge 2: Retrieve all movie titles and their average rating, and then order each movie according to average rating in ascending order.
SELECT 
	s.title, 
	AVG(r.rating) as avg_rating
FROM series s
JOIN reviews r
ON s.id = r.series_id
GROUP BY s.id
ORDER BY 2 ASC;

-- Challenge 3: Retrieve the first name and last name of each reviewers and their ratings stored in the database.
SELECT
	a.first_name,
	a.last_name,
	b.rating
FROM reviewers a 
JOIN reviews b
ON a.id = b.reviewer_id;

-- Challenge 4: Retrieve series titles with no reviews. Name the column "unreviewed_series." 
SELECT
	title as unreviewed_series
FROM series s
LEFT JOIN reviews r
ON s.id = r.series_id
WHERE rating IS NULL;

-- Challenge 5: Retrieve genre and average rating rounded to 2 places.
SELECT
	s.genre,
	ROUND(AVG(r.rating), 2) as avg_rating
FROM series s
JOIN reviews r 
ON s.id = r.series_id
GROUP BY 1;

-- Challenge 6: CREATE A REPORT!! Retrieve all of the reviewers name and the following: # of reviews, lowest rating, highest rating, average rating, and a status denoting "active" if the reviewer has ratings in the database or "inactive" if there are no ratings in the database.
SELECT
	a.first_name,
	a.last_name,
	COUNT(b.rating) AS 'COUNT',
	IFNULL(MIN(b.rating), 0) AS 'MIN',
	IFNULL (MAX(b.rating), 0) AS 'MAX',
	IFNULL(AVG(b.rating), 0) AS 'AVG',
	CASE
		WHEN b.rating IS NOT NULL THEN 'ACTIVE'
		ELSE 'INACTIVE'
	END as 'STATUS'
FROM reviewers a
LEFT JOIN reviews b
ON a.id = b.reviewer_id
GROUP BY a.id;

-- Challenge 7: Retrieve the series title and each rating that series got along with the reviewer.
SELECT 
	s.title, 
	r.rating,
	CONCAT (z.first_name, ' ', z.last_name) AS reviewer
FROM series s 
JOIN reviews r
	ON s.id = r.series_id
JOIN reviewers z
	ON z.id = r.reviewer_id
ORDER BY 1;
